{:linters
 {:unresolved-symbol {:exclude [goog.DEBUG
                                goog.string.unescapeEntities
                                ;; TODO:lint: Fix when fixing all type hints
                                object]}
  ;; TODO:lint: Remove node-path excludes once we have a cleaner api
  :unresolved-var {:exclude [frontend.util/node-path.basename
                             frontend.util/node-path.dirname
                             frontend.util/node-path.join
                             frontend.util/node-path.name]}

  :consistent-alias
  {:aliases {datascript.core d
             datascript.transit dt
             datascript.db ddb
             lambdaisland.glogi log
             medley.core medley
             frontend.db.query-dsl query-dsl
             frontend.db.react react
             frontend.db.query-react query-react
             frontend.util util
             frontend.util.property property
             frontend.util.text text-util
             frontend.config config
             frontend.format.mldoc mldoc
             frontend.format.block block
             frontend.handler.extract extract
             logseq.graph-parser graph-parser
             logseq.graph-parser.text text
             logseq.graph-parser.block gp-block
             logseq.graph-parser.mldoc gp-mldoc
             logseq.graph-parser.util gp-util
             logseq.graph-parser.property gp-property
             logseq.graph-parser.config gp-config
             logseq.graph-parser.date-time-util date-time-util
             logseq.graph-parser.util.page-ref page-ref
             logseq.graph-parser.util.block-ref block-ref}}}

 :hooks {:analyze-call {rum.core/defc hooks.rum/defc
                        rum.core/defcs hooks.rum/defcs}}
 :lint-as {promesa.core/let clojure.core/let
           promesa.core/loop clojure.core/loop
           promesa.core/recur clojure.core/recur
           rum.core/defcc rum.core/defc
           rum.core/defcontext clojure.core/def
           clojure.test.check.clojure-test/defspec clojure.core/def
           clojure.test.check.properties/for-all clojure.core/for
           nubank.workspaces.core/defcard clojure.core/def
           ;; src/main
           frontend.modules.outliner.datascript/auto-transact! clojure.core/let
           frontend.namespaces/import-vars potemkin/import-vars
           ;; src/test
           frontend.react/defc clojure.core/defn}
 :skip-comments true
 :output {:progress true}}
